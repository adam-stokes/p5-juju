name    = Juju
author  = Adam Stokes <adamjs@cpan.org>
license = MIT
copyright_holder = Adam Stokes
copyright_year   = 2014

[ReportPhase / ENTER]   ; reports the dzil build phases

[Git::NextVersion]

; -- basic
[Git::GatherDir]
exclude_filename = README.mkdn
[PruneCruft]
[AutoPrereqs]

; -- tests
[Test::Compile]
fake_home = 1
[ReportVersions::Tiny]
[Test::Kwalitee]
skiptest = use_strict ; Don't test for strictness.

; -- munge
[Prepender]
copyright = 1
[Authority]
[Git::Describe]
[PkgVersion]
[PodWeaver]

; -- changelog
[NextRelease]
time_zone = EST
filename = Changes
format = %v%n%tReleased: %{yyyy-MM-dd HH:mm:ss VVVV}d
[ChangelogFromGit]              ; generate CommitLog from git history
file_name = CommitLog

; -- process meta
[ExecDir]
dir = bin
[ShareDir]
dir = share
[MinimumPerl]
[Bugtracker]
[Homepage]
[MetaConfig]
;[MetaData::BuiltWith]
[Repository]
git_remote = origin
[MetaResources]
license = http://dev.perl.org/licenses

; generate meta
[MetaNoIndex]
directory = inc t xt eg share eg
[MetaProvides::Package]
meta_noindex = 1
[License]
[ModuleBuildTiny]
[MakeMaker::Fallback]
[MetaYAML]
[MetaJSON]
[ReadmeMarkdownFromPod]
[InstallGuide]
[DOAP]
[Covenant]
[CPANFile]
[Manifest]


; -- pre - release
[CheckChangesHasContent]
changelog = Changes
[Git::Check]
changelog = Changes
allow_dirty = README.mkdn
[PromptIfStale]
check_authordeps = 1
check_all_plugins = 1
check_all_prereqs = 1
phase = release
fatal = 1
[TestRelease]
[@Git::CheckFor]
[CheckPrereqsIndexed]
[CheckSelfDependency]
[CheckIssues]
[ConfirmRelease]

; -- release
[UploadToCPAN]

; -- post - release
[ArchiveRelease]
directory = releases
[Git::Commit]
changelog = Changes
commit_msg = New CPAN release of %N - v%v%n%n%c
time_zone = EST
allow_dirty = README.mkdn
[Git::Tag]
[Git::Push]
push_to = origin
[Clean]
[SchwartzRatio] ; old distros
[ReportPhase / Leave]